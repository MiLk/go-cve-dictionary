package nvd

import (
	"fmt"
	"strconv"
	"strings"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/db"
	"github.com/kotakanbe/go-cve-dictionary/fetcher"
	"github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/models"
)

// CheckUpdatedFeeds Fetch CVE meta information from NVD
func CheckUpdatedFeeds(driver db.DB, years []int) (outOfDateMetas []models.FeedMeta, err error) {
	reqs := []fetcher.FetchRequest{}
	for _, year := range years {
		urls := MakeNvdMetaURLs(year, c.Conf.NVDXML)
		for _, url := range urls {
			reqs = append(reqs, fetcher.FetchRequest{
				Year: year,
				URL:  url,
			})
		}
	}

	results, err := fetcher.FetchFeedFiles(reqs)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch. err: %s", err)
	}

	for _, res := range results {
		str := string(res.Body)
		ss := strings.Split(str, "\r\n")
		if len(ss) != 6 {
			continue
		}
		hash := ss[4]

		url := ""
		if c.Conf.NVDXML {
			url = strings.Replace(res.URL, ".meta", ".xml.gz", -1)
		} else {
			url = strings.Replace(res.URL, ".meta", ".json.gz", -1)
		}

		sha1, err := driver.GetFeedHash(url)
		if err != nil {
			return nil, fmt.Errorf("Failed to get hash: %d, err: %s",
				res.Year, err)
		}
		if sha1 != hash {
			log.Infof("Out of date: %s", res.URL)
			outOfDateMetas = append(outOfDateMetas, models.FeedMeta{
				URL:  url,
				Hash: hash,
			})
		} else {
			log.Infof("Up to date: %s", url)
		}
	}
	return
}

// UpdateMeta updates meta table
func UpdateMeta(driver db.DB, metas []models.FeedMeta) error {
	for _, meta := range metas {
		err := driver.UpsertFeedHash(meta.URL, meta.Hash)
		if err != nil {
			return fmt.Errorf("Failed to updte meta: %s, err: %s",
				meta.URL, err)
		}
	}
	return nil
}

// MakeNvdMetaURLs returns a URL of NVD Feed
func MakeNvdMetaURLs(year int, xml bool) (url []string) {
	formatTemplate := ""
	if xml {
		//  http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2016.xml.gz
		formatTemplate = "https://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-%s.meta"
	} else {
		formatTemplate = "https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-%s.meta"
	}

	if year == c.Latest {
		for _, name := range []string{"modified", "recent"} {
			url = append(url, fmt.Sprintf(formatTemplate, name))
		}
	} else {
		feed := strconv.Itoa(year)
		url = append(url, fmt.Sprintf(formatTemplate, feed))
	}
	return
}
