package json

import (
	"encoding/json"
	"fmt"
	"strconv"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/fetcher"
	"github.com/kotakanbe/go-cve-dictionary/models"
)

// FetchNvd Fetch CVE vulnerability informatino from JVN
func FetchNvd(years []int) (entries []models.NvdJSON, err error) {
	reqs := []fetcher.FetchRequest{}
	for _, url := range makeNvdURLs(years, c.Conf.JSON) {
		reqs = append(reqs, fetcher.FetchRequest{
			URL:  url,
			GZIP: true,
		})
	}

	results, err := fetcher.FetchFeedFiles(reqs)
	if err != nil {
		return nil,
			fmt.Errorf("Failed to fetch. err: %s", err)
	}

	for _, res := range results {
		nvd := models.NvdJSON{}
		if err = json.Unmarshal(res.Body, &nvd); err != nil {
			return nil, fmt.Errorf(
				"Failed to unmarshal. url: %s, err: %s",
				res.URL, err)
		}
		entries = append(entries, nvd)
	}
	return
}

func makeNvdURLs(years []int, json bool) (urls []string) {
	//  http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2016.xml.gz
	formatTemplate := "https://static.nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-%s.json.gz"
	for _, year := range years {
		feed := ""
		if year == c.Modified {
			feed = "modified"
		} else {
			feed = strconv.Itoa(year)
		}
		urls = append(urls, fmt.Sprintf(formatTemplate, feed))
	}
	return
}
