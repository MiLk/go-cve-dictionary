package xml

import (
	"encoding/xml"
	"fmt"
	"strconv"
	"time"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/fetcher"
)

// Nvd is array of Entry
type Nvd struct {
	Entries []Entry `xml:"entry"`
}

// Entry is Root Element
type Entry struct {
	CveID            string      `xml:"id,attr" json:"id"`
	PublishedDate    time.Time   `xml:"published-datetime"`
	LastModifiedDate time.Time   `xml:"last-modified-datetime"`
	Cvss             Cvss        `xml:"cvss>base_metrics" json:"cvss"`
	Products         []string    `xml:"vulnerable-software-list>product"` //CPE
	Summary          string      `xml:"summary"`
	References       []Reference `xml:"references"`
	Cwes             []Cwe       `xml:"cwe"`
}

// Cvss is Cvss Score
type Cvss struct {
	Score                 string    `xml:"score"`
	AccessVector          string    `xml:"access-vector"`
	AccessComplexity      string    `xml:"access-complexity"`
	Authentication        string    `xml:"authentication"`
	ConfidentialityImpact string    `xml:"confidentiality-impact"`
	IntegrityImpact       string    `xml:"integrity-impact"`
	AvailabilityImpact    string    `xml:"availability-impact"`
	Source                string    `xml:"source"`
	GeneratedOnDate       time.Time `xml:"generated-on-datetime"`
}

// Cwe has Cwe ID
type Cwe struct {
	ID string `xml:"id,attr"`
}

// Reference is additional information about the CVE
type Reference struct {
	Type   string `xml:"reference_type,attr"`
	Source string `xml:"source"`
	Link   Link   `xml:"reference"`
}

// Link is additional information about the CVE
type Link struct {
	Value string `xml:",chardata" json:"value"`
	Href  string `xml:"href,attr" json:"href"`
}

// FetchNvd Fetch CVE vulnerability informatino from JVN
func FetchNvd(years []int) (entries []Entry, err error) {
	reqs := []fetcher.FetchRequest{}
	for _, url := range makeNvdURLs(years, c.Conf.JSON) {
		reqs = append(reqs, fetcher.FetchRequest{
			URL:  url,
			GZIP: true,
		})
	}

	results, err := fetcher.FetchFeedFiles(reqs)
	if err != nil {
		return nil,
			fmt.Errorf("Failed to fetch. err: %s", err)
	}

	for _, res := range results {
		nvd := Nvd{}
		if err = xml.Unmarshal(res.Body, &nvd); err != nil {
			return nil, fmt.Errorf(
				"Failed to unmarshal. url: %s, err: %s",
				res.URL, err)
		}
		entries = append(entries, nvd.Entries...)
	}
	return
}

func makeNvdURLs(years []int, json bool) (urls []string) {
	//  http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2016.xml.gz
	formatTemplate := "https://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-%s.xml.gz"
	for _, year := range years {
		feed := ""
		if year == c.Modified {
			feed = "modified"
		} else {
			feed = strconv.Itoa(year)
		}
		urls = append(urls, fmt.Sprintf(formatTemplate, feed))
	}
	return
}
